tt<-x%*%wt
pt<- t(x)%*%tt/as.numeric(t(tt)%*%tt)
npt<-as.numeric(sqrt(t(pt)%*%pt))
wn<-npt*wt
tn<-npt*tt
pn<-pt/npt
bn<-as.numeric(t(tn)%*%y)/as.numeric(t(tn)%*%tn)
x<-x-tn%*%t(pn)
y<-y-bn*tn
b<-c(b,bn)
p<-cbind(p,pn)
a<-cbind(a,wn)
u<-cbind(u,tn)
}
dim(x)[2]->ab
return(structure(list(b=b,p=p,a=a,u=u,d=ab,q=k),class="upls"))
}
vip<-function(obj,y,nm=NULL)
{
if(class(obj)!="upls"){
stop("Object is not of type upls")
}
a1<-as.vector(obj$a^2%*%cor(obj$u,y)^2 )
if(is.null(nm)){
a2<-1:length(a1)
names(a1)<-paste(a2)
}else{
names(a1)<-nm
}
return(a1)##sort(a1,decreasing=TRUE))
}
save.IMP<-function(fname)
{
loc<-paste("~/NeuroMiner/presentations/",format(Sys.time(),"%m-%d-%Y"),"/",sep="")
mkdirs(loc)
pdf(file=paste(loc, substr(fname,1,nchar(fname)-4), "VARIMP.pdf",sep=""), width=11,
height=8.5, pointsize=12,bg="transparent")
#  texfile <- paste(loc,substr(fname,1,nchar(fname)-4),'.pdf',sep="")
cnames<-c("rf","rf","rf","rf","rf",
"pls","pls","pls","pls","pls")
colnames(varimp)<-cnames
#knitr::kable(varimp,  caption = "A table produced by printr.")
par(mfrow=c(2,1))
textplot( xtable(varimp[-1,1:5]))
textplot(xtable(varimp[-1,6:10]))
dev.off()
#   tt <- print(xtable(varimp[-1,]), type='latex')
#
#   print(xtable(varimp[-1,]), type='latex')
#
#   texfile <- paste(loc,substr(fname,1,nchar(fname)-4),'.tex',sep="")
#   cat(
#     '\\documentclass[12pt]{report}
#       \\usepackage[landscape]{geometry}
#       \\date{}
#       \\begin{document}', tt, '\\end{document}', sep='',
#     file=texfile
#   )
#   ## pdflatex from texlive package for linux converts .tex to .pdf
#
#   tools::texi2dvi(texfile, pdf = TRUE, clean = TRUE)
#   tools::texi2pdf(texfile,  clean = TRUE)
#   # show R version information
#   textplot(version)
#   # show the alphabet as a single string
#   textplot( paste(letters[1:26], collapse=" ") )
#
#   # show the alphabet as a matrix
#   textplot( matrix(letters[1:26], ncol=2))
#
#   ### Make a nice 4 way display with two plots and two text summaries
#   data(iris)
#   par(mfrow=c(2,2))
#   plot( Sepal.Length ~ Species, data=iris, border="blue", col="cyan",
#         main="Boxplot of Sepal Length by Species" )
#   plotmeans(Sepal.Length ~ Species, data=iris, barwidth=2, connect=FALSE,
#             main="Means and 95\% Confidence Intervals\nof Sepal Length by Species")
#
#   info <- sapply(split(iris$Sepal.Length, iris$Species),
#                  function(x) round(c(Mean=mean(x), SD=sd(x), N=gdata::nobs(x)),2))
#
#   textplot( info, valign="top"  )
#   title("Sepal Length by Species")
#
#   reg <- lm( Sepal.Length ~ Species, data=iris )
#   textplot( capture.output(summary(reg)), valign="top")
#   title("Regression of Sepal Length by Species")
#
#   par(mfrow=c(1,1))
}
save.time<-function(fname)
{
loc<-paste("~/NeuroMiner/presentations/",format(Sys.time(),"%m-%d-%Y"),"/",sep="")
mkdirs(loc)
pdf(file=paste(loc, substr(fname,1,nchar(fname)-4), "time.pdf",sep=""), width=11,
height=8.5, pointsize=12,bg="transparent")
textplot(xtable(ftemp[-1,]))
dev.off()
}
#####
## batch processing
##############
nx1<-33:96
nx2<-97:110
nx3<-111:159
###try
#ny<-15
###original
ny<-4
#coldat<-process.csv(colmaster)
#cols=rainbow(length(unique(temp1[,1]))+2)
#cols=parsecolors(cols)
z=1:18
#z[-c(4,5,6,7,8,12,13,15,16)]
#z[-c(4)]
### for the time being we omit drosphilia, its a small dataset n=18
varimp<-array(NA,dim=c(1,10))
for (i in z[-c(4)])
{
varimp<-array(NA,dim=c(1,10))
ftemp<-array(NA,dim=c(1,3))
dimnames(ftemp)[[2]]<-c("time (s)","OOB","R deviance")
#i=1
#temp1<-process.csv(myfiles[[1]])
temp1<-process.csv(myfiles[[i]])
nxx1<-2:65
nxx2<-66:79
nxx3<-81:dim(temp1)[2] #80 is Sholl.1 should always be 1
cols=rainbow(length(unique(temp1[,1]))+2)
###comment out if running single species
cols=parsecolors(cols)
ptm<-proc.time()[3]
set.seed(100)
g1rf<-randomForest(y~.,data=temp1[,c(1,nxx1)])##,prox=TRUE)
ftime<-round(proc.time()[3]-ptm,4);names(ftime)<-("L-measure forest")
v1rf<-varImpPlot(g1rf)
dev<-try.multinom(v1rf,temp1,5)
last<-end(g1rf$err.rate)[1]
OOB<-round(mean(g1rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[1]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)
ptm<-proc.time()[3]
set.seed(100)
g1pls<-nipal(as.matrix(temp1[,c(nxx1)]),as.numeric(temp1$y),40)
v1pls<-vip(g1pls,as.numeric(temp1$y),names(temp1[,c(nxx1)]))
ftime[2]<-round(proc.time()[3]-ptm,4);names(ftime)[2]<-("L-measure pls")
dev<-try.multinom(v1pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[2]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[2]
#print.err(g1rf,"L-measure",names(myfiles[i]))
counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g1rf,"L-measure",names(myfiles[i]),counts)
PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
varimp<-save.PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
#old multinom code
#####
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp,maxit=200)
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
#
# vars<-tail(order(scale(v1pls)),5)
# index<-append(vars+1,1,0)
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp)
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
# lmeasure0<-vglm(y~1,data=scaletemp,family=multinomial)
# lmeasure<-multinom(y~varimp[2]+varimp[3],data=temp1[,c(1,nxx1)])
# lmeasure<-multinom(y~.,data=temp1[,c(index)])
# junklist<-dimnames(scale(v1rf))[[1]]
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# junklist[c(vars)]
# y<-temp1[,c(1,nxx1)]$y
#somestuff<-aov(temp1[,c(1,nxx1)]$y~temp1[,c(1,nxx1)][c(vars+1)])
#####
ptm<-proc.time()[3]
set.seed(100)
g2rf<-randomForest(y~.,data=temp1[,c(1,nxx2)])##,prox=TRUE)
ftime[3]<-round(proc.time()[3]-ptm,4);names(ftime)[3]<-("gstat forest")
v2rf<-varImpPlot(g2rf)
dev<-try.multinom(v2rf,temp1,5)
last<-end(g2rf$err.rate)[1]
OOB<-round(mean(g2rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[3]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[3]
ptm<-proc.time()[3]
set.seed(100)
g2pls<-nipal(as.matrix(temp1[,c(nxx2)]),as.numeric(temp1$y),40)
v2pls<-vip(g2pls,as.numeric(temp1$y),names(temp1[,c(nxx2)]))
ftime[4]<-round(proc.time()[3]-ptm,4);names(ftime)[4]<-("gstat pls")
dev<-try.multinom(v2pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[4]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[4]
#print.err(g2,"Gstat","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g2rf,"Tree topology",names(myfiles[i]),counts)
PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
varimp<-save.PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
ptm<-proc.time()[3]
set.seed(100)
g3rf<-randomForest(y~.,data=temp1[,c(1,nxx3)])##,prox=TRUE)
ftime[5]<-round(proc.time()[3]-ptm,4);names(ftime)[5]<-("Sholl random forest")
v3rf<-varImpPlot(g3rf)
dev<-try.multinom(v3rf,temp1,5)
last<-end(g3rf$err.rate)[1]
OOB<-round(mean(g3rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[5]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[5]
ptm<-proc.time()[3]
set.seed(100)
g3pls<-nipal(as.matrix(temp1[,c(nxx3)]),as.numeric(temp1$y),40)
v3pls<-vip(g3pls,as.numeric(temp1$y),names(temp1[,c(nxx3)]))
ftime[6]<-round(proc.time()[3]-ptm,4);names(ftime)[6]<-("Sholl analysis PLS")
dev<-try.multinom(v3pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[6]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[6]
#print.err(g3,"Sholl analysis","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g3rf,"Sholl analysis",names(myfiles[i]),counts)
PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
varimp<-save.PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
ptm<-proc.time()[3]
set.seed(100)
gtotrf<-randomForest(y~.,data=temp1[,c(1,nxx1,nxx2,nxx3)])##,prox=TRUE)
ftime[7]<-round(proc.time()[3]-ptm,4);names(ftime)[7]<-("Combined random forest")
vtotrf<-varImpPlot(gtotrf)
dev<-try.multinom(vtotrf,temp1,5)
last<-end(gtotrf$err.rate)[1]
OOB<-round(mean(gtotrf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[7]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[7]
ptm<-proc.time()[3]
set.seed(100)
gtotpls<-nipal(as.matrix(temp1[,c(nxx1,nxx2,nxx3)]),as.numeric(temp1$y),40)
vtotpls<-vip(gtotpls,as.numeric(temp1$y),names(temp1[,c(nxx1,nxx2,nxx3)]))
ftime[8]<-round(proc.time()[3]-ptm,4);names(ftime)[8]<-("Combined PLS")
dev<-try.multinom(vtotpls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[8]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[8]
#print.err(gtot,"Combined","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(gtotrf,"Combined",names(myfiles[i]),counts)
PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
varimp<-save.PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
save.IMP(names(myfiles[i]))
save.time(names(myfiles[i]))
}
x
junk
junk1
junk1$fe=0
junk1$fe<-0
data.frame(junk1)
junk1<-dataframe(deviance<-0)
junk1<-data.frame(deviance<-0)
junk1
junk1$deviance
try.multinom<-function(pdata,ltemp,numvar)
{
vars<-tail(order(scale(pdata)),numvar)
index<-append(vars+1,1,0)
scaletemp<-data.frame(apply(ltemp[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
scaletemp<-cbind(y=ltemp$y,scaletemp)
lmeasure<-tryCatch({multinom(y~.,data=scaletemp,maxit=100)},
error=function(err){
lmeasure<-data.frame(deviance<-0)
return<-lmeasure}
return(round(lmeasure$deviance,3))
}
try.multinom<-function(pdata,ltemp,numvar)
{
vars<-tail(order(scale(pdata)),numvar)
index<-append(vars+1,1,0)
scaletemp<-data.frame(apply(ltemp[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
scaletemp<-cbind(y=ltemp$y,scaletemp)
lmeasure<-tryCatch({multinom(y~.,data=scaletemp,maxit=100)},
error=function(err){
lmeasure<-data.frame(deviance<-0)
return<-lmeasure})
return(round(lmeasure$deviance,3))
}
#####
## batch processing
##############
nx1<-33:96
nx2<-97:110
nx3<-111:159
###try
#ny<-15
###original
ny<-4
#coldat<-process.csv(colmaster)
#cols=rainbow(length(unique(temp1[,1]))+2)
#cols=parsecolors(cols)
z=1:18
#z[-c(4,5,6,7,8,12,13,15,16)]
#z[-c(4)]
### for the time being we omit drosphilia, its a small dataset n=18
varimp<-array(NA,dim=c(1,10))
for (i in z[-c(4)])
{
varimp<-array(NA,dim=c(1,10))
ftemp<-array(NA,dim=c(1,3))
dimnames(ftemp)[[2]]<-c("time (s)","OOB","R deviance")
#i=1
#temp1<-process.csv(myfiles[[1]])
temp1<-process.csv(myfiles[[i]])
nxx1<-2:65
nxx2<-66:79
nxx3<-81:dim(temp1)[2] #80 is Sholl.1 should always be 1
cols=rainbow(length(unique(temp1[,1]))+2)
###comment out if running single species
cols=parsecolors(cols)
ptm<-proc.time()[3]
set.seed(100)
g1rf<-randomForest(y~.,data=temp1[,c(1,nxx1)])##,prox=TRUE)
ftime<-round(proc.time()[3]-ptm,4);names(ftime)<-("L-measure forest")
v1rf<-varImpPlot(g1rf)
dev<-try.multinom(v1rf,temp1,5)
last<-end(g1rf$err.rate)[1]
OOB<-round(mean(g1rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[1]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)
ptm<-proc.time()[3]
set.seed(100)
g1pls<-nipal(as.matrix(temp1[,c(nxx1)]),as.numeric(temp1$y),40)
v1pls<-vip(g1pls,as.numeric(temp1$y),names(temp1[,c(nxx1)]))
ftime[2]<-round(proc.time()[3]-ptm,4);names(ftime)[2]<-("L-measure pls")
dev<-try.multinom(v1pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[2]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[2]
#print.err(g1rf,"L-measure",names(myfiles[i]))
counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g1rf,"L-measure",names(myfiles[i]),counts)
PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
varimp<-save.PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
#old multinom code
#####
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp,maxit=200)
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
#
# vars<-tail(order(scale(v1pls)),5)
# index<-append(vars+1,1,0)
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp)
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
# lmeasure0<-vglm(y~1,data=scaletemp,family=multinomial)
# lmeasure<-multinom(y~varimp[2]+varimp[3],data=temp1[,c(1,nxx1)])
# lmeasure<-multinom(y~.,data=temp1[,c(index)])
# junklist<-dimnames(scale(v1rf))[[1]]
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# junklist[c(vars)]
# y<-temp1[,c(1,nxx1)]$y
#somestuff<-aov(temp1[,c(1,nxx1)]$y~temp1[,c(1,nxx1)][c(vars+1)])
#####
ptm<-proc.time()[3]
set.seed(100)
g2rf<-randomForest(y~.,data=temp1[,c(1,nxx2)])##,prox=TRUE)
ftime[3]<-round(proc.time()[3]-ptm,4);names(ftime)[3]<-("gstat forest")
v2rf<-varImpPlot(g2rf)
dev<-try.multinom(v2rf,temp1,5)
last<-end(g2rf$err.rate)[1]
OOB<-round(mean(g2rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[3]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[3]
ptm<-proc.time()[3]
set.seed(100)
g2pls<-nipal(as.matrix(temp1[,c(nxx2)]),as.numeric(temp1$y),40)
v2pls<-vip(g2pls,as.numeric(temp1$y),names(temp1[,c(nxx2)]))
ftime[4]<-round(proc.time()[3]-ptm,4);names(ftime)[4]<-("gstat pls")
dev<-try.multinom(v2pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[4]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[4]
#print.err(g2,"Gstat","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g2rf,"Tree topology",names(myfiles[i]),counts)
PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
varimp<-save.PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
ptm<-proc.time()[3]
set.seed(100)
g3rf<-randomForest(y~.,data=temp1[,c(1,nxx3)])##,prox=TRUE)
ftime[5]<-round(proc.time()[3]-ptm,4);names(ftime)[5]<-("Sholl random forest")
v3rf<-varImpPlot(g3rf)
dev<-try.multinom(v3rf,temp1,5)
last<-end(g3rf$err.rate)[1]
OOB<-round(mean(g3rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[5]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[5]
ptm<-proc.time()[3]
set.seed(100)
g3pls<-nipal(as.matrix(temp1[,c(nxx3)]),as.numeric(temp1$y),40)
v3pls<-vip(g3pls,as.numeric(temp1$y),names(temp1[,c(nxx3)]))
ftime[6]<-round(proc.time()[3]-ptm,4);names(ftime)[6]<-("Sholl analysis PLS")
dev<-try.multinom(v3pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[6]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[6]
#print.err(g3,"Sholl analysis","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g3rf,"Sholl analysis",names(myfiles[i]),counts)
PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
varimp<-save.PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
ptm<-proc.time()[3]
set.seed(100)
gtotrf<-randomForest(y~.,data=temp1[,c(1,nxx1,nxx2,nxx3)])##,prox=TRUE)
ftime[7]<-round(proc.time()[3]-ptm,4);names(ftime)[7]<-("Combined random forest")
vtotrf<-varImpPlot(gtotrf)
dev<-try.multinom(vtotrf,temp1,5)
last<-end(gtotrf$err.rate)[1]
OOB<-round(mean(gtotrf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[7]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[7]
ptm<-proc.time()[3]
set.seed(100)
gtotpls<-nipal(as.matrix(temp1[,c(nxx1,nxx2,nxx3)]),as.numeric(temp1$y),40)
vtotpls<-vip(gtotpls,as.numeric(temp1$y),names(temp1[,c(nxx1,nxx2,nxx3)]))
ftime[8]<-round(proc.time()[3]-ptm,4);names(ftime)[8]<-("Combined PLS")
dev<-try.multinom(vtotpls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[8]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[8]
#print.err(gtot,"Combined","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(gtotrf,"Combined",names(myfiles[i]),counts)
PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
varimp<-save.PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
save.IMP(names(myfiles[i]))
save.time(names(myfiles[i]))
}
lmeasure
varimp<-array(NA,dim=c(1,10))
ftemp<-array(NA,dim=c(1,3))
dimnames(ftemp)[[2]]<-c("time (s)","OOB","R deviance")
i=1
temp1<-process.csv(myfiles[[i]])
nxx1<-2:65
nxx2<-66:79
nxx3<-81:dim(temp1)[2] #80 is Sholl.1 should always be 1
cols=rainbow(length(unique(temp1[,1]))+2)
###comment out if running single species
cols=parsecolors(cols)
ptm<-proc.time()[3]
set.seed(100)
g1rf<-randomForest(y~.,data=temp1[,c(1,nxx1)])##,prox=TRUE)
ftime<-round(proc.time()[3]-ptm,4);names(ftime)<-("L-measure forest")
v1rf<-varImpPlot(g1rf)
dev<-try.multinom(v1rf,temp1,5)
last<-end(g1rf$err.rate)[1]
OOB<-round(mean(g1rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[1]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)
ptm<-proc.time()[3]
set.seed(100)
g1pls<-nipal(as.matrix(temp1[,c(nxx1)]),as.numeric(temp1$y),40)
v1pls<-vip(g1pls,as.numeric(temp1$y),names(temp1[,c(nxx1)]))
ftime[2]<-round(proc.time()[3]-ptm,4);names(ftime)[2]<-("L-measure pls")
dev<-try.multinom(v1pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[2]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[2]
#print.err(g1rf,"L-measure",names(myfiles[i]))
counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g1rf,"L-measure",names(myfiles[i]),counts)
PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
varimp<-save.PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
vars<-tail(order(scale(v1rf)),5)
vars
v1rf
scale(v1rf)
range
range(scale(v1rf))
range(v1rf)
index<-vars+1
index
scaletemp<-data.frame(apply(temp1[,c(index)], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
head(scaletemp)
scaletemp<-cbind(y=temp1$y,scaletemp)
scaletemp
head(scaltemp)
head(scaletemp)
str(scaletemp$y)
lmeasure<-multinom(y~.,data=scaletemp)
install.packages("mlogit")
library(mlogit)
?mlogit
scaletemp<-cbind(y=temp1$y,scaletemp)
lmeasure<-multinom(y~.,data=scaletemp,maxit=200)
index<-vars+1
scaletemp<-data.frame(apply(temp1[,c(index)], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
scaletemp<-cbind(y=temp1$y,scaletemp)
head(scaletemp)
lmeasure<-multinom(y~.,data=scaletemp,maxit=200)
lmeasure1<-mlogit(y~.,data=scaltemp)
lmeasure1<-mlogit(y~.,data=scaletemp)
lmeasure1<-mlogit(y~.,data=scaletemp,shape="wide")
head g1pls
head(g1pls)
summary(g1pls)
g1pls$b
g1pls$d
g1pls$q
