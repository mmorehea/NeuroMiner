v1pls<-vip(g1pls,as.numeric(temp1$y),names(temp1[,c(nxx1)]))
ftime[2]<-round(proc.time()[3]-ptm,4);names(ftime)[2]<-("L-measure pls")
#dev<-try.multinom(v1pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[2]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[2]
#print.err(g1rf,"L-measure",names(myfiles[i]))
counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g1rf,"L-measure",names(myfiles[i]),counts)
PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
varimp<-save.PLSvRF(v1rf,v1pls,"L-measure",names(myfiles[i]),temp1[,c(nxx1)])
#old multinom code
#####
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# index<-vars+1
#
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
#
# scaletemp<-data.frame(apply(temp1[,c(index)], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
#
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp,maxit=200)
#
# lmeasure1<-mlogit(y~.,data=scaletemp,shape="wide")
#
#
#
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
#
# vars<-tail(order(scale(v1pls)),5)
# index<-append(vars+1,1,0)
# scaletemp<-data.frame(apply(temp1[,c(index[-1])], MARGIN = 2, FUN = function(X) (X - min(X))/diff(range(X))))
# scaletemp<-cbind(y=temp1$y,scaletemp)
# lmeasure<-multinom(y~.,data=scaletemp)
#
# lmeasure1<-vglm(y~.,data=scaletemp,family=multinomial)
# lmeasure0<-vglm(y~1,data=scaletemp,family=multinomial)
# lmeasure<-multinom(y~varimp[2]+varimp[3],data=temp1[,c(1,nxx1)])
# lmeasure<-multinom(y~.,data=temp1[,c(index)])
# junklist<-dimnames(scale(v1rf))[[1]]
# vars<-tail(order(scale(v1rf)),5)
# index<-append(vars+1,1,0)
# junklist[c(vars)]
# y<-temp1[,c(1,nxx1)]$y
#somestuff<-aov(temp1[,c(1,nxx1)]$y~temp1[,c(1,nxx1)][c(vars+1)])
#####
ptm<-proc.time()[3]
set.seed(100)
g2rf<-randomForest(y~.,data=temp1[,c(1,nxx2)])##,prox=TRUE)
ftime[3]<-round(proc.time()[3]-ptm,4);names(ftime)[3]<-("gstat forest")
v2rf<-varImpPlot(g2rf)
#dev<-try.multinom(v2rf,temp1,5)
dev<-0
last<-end(g2rf$err.rate)[1]
OOB<-round(mean(g2rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[3]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[3]
ptm<-proc.time()[3]
set.seed(100)
g2pls<-nipal(as.matrix(temp1[,c(nxx2)]),as.numeric(temp1$y),40)
v2pls<-vip(g2pls,as.numeric(temp1$y),names(temp1[,c(nxx2)]))
ftime[4]<-round(proc.time()[3]-ptm,4);names(ftime)[4]<-("gstat pls")
#dev<-try.multinom(v2pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[4]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[4]
#print.err(g2,"Gstat","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g2rf,"Tree topology",names(myfiles[i]),counts)
PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
varimp<-save.PLSvRF(v2rf,v2pls,"Tree topology",names(myfiles[i]),temp1[,c(nxx2)])
ptm<-proc.time()[3]
set.seed(100)
g3rf<-randomForest(y~.,data=temp1[,c(1,nxx3)])##,prox=TRUE)
ftime[5]<-round(proc.time()[3]-ptm,4);names(ftime)[5]<-("Sholl random forest")
v3rf<-varImpPlot(g3rf)
#dev<-try.multinom(v3rf,temp1,5)
last<-end(g3rf$err.rate)[1]
OOB<-round(mean(g3rf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[5]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[5]
ptm<-proc.time()[3]
set.seed(100)
g3pls<-nipal(as.matrix(temp1[,c(nxx3)]),as.numeric(temp1$y),40)
v3pls<-vip(g3pls,as.numeric(temp1$y),names(temp1[,c(nxx3)]))
ftime[6]<-round(proc.time()[3]-ptm,4);names(ftime)[6]<-("Sholl analysis PLS")
#dev<-try.multinom(v3pls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[6]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[6]
#print.err(g3,"Sholl analysis","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(g3rf,"Sholl analysis",names(myfiles[i]),counts)
PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
varimp<-save.PLSvRF(v3rf,v3pls,"Sholl analysis",names(myfiles[i]),temp1[,c(nxx3)])
ptm<-proc.time()[3]
set.seed(100)
gtotrf<-randomForest(y~.,data=temp1[,c(1,nxx1,nxx2,nxx3)])##,prox=TRUE)
ftime[7]<-round(proc.time()[3]-ptm,4);names(ftime)[7]<-("Combined random forest")
vtotrf<-varImpPlot(gtotrf)
#dev<-try.multinom(vtotrf,temp1,5)
last<-end(gtotrf$err.rate)[1]
OOB<-round(mean(gtotrf$err.rate[last,1]),3)
ftemp<-rbind(ftemp,c(ftime[[7]],OOB,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[7]
ptm<-proc.time()[3]
set.seed(100)
gtotpls<-nipal(as.matrix(temp1[,c(nxx1,nxx2,nxx3)]),as.numeric(temp1$y),40)
vtotpls<-vip(gtotpls,as.numeric(temp1$y),names(temp1[,c(nxx1,nxx2,nxx3)]))
ftime[8]<-round(proc.time()[3]-ptm,4);names(ftime)[8]<-("Combined PLS")
#dev<-try.multinom(vtotpls,temp1,5)
ftemp<-rbind(ftemp,c(ftime[[8]],NA,dev))
row.names(ftemp)[nrow(ftemp)]<-names(ftime)[8]
#print.err(gtot,"Combined","NeuronDataMaster")
#counts<-c(sum(count(temp1$y)[,2]),count(temp1$y)[,2])
save.err(gtotrf,"Combined",names(myfiles[i]),counts)
PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
varimp<-save.PLSvRF(vtotrf,vtotpls,"Combined",names(myfiles[i]),temp1[,c(nxx1,nxx2,nxx3)])
save.IMP(names(myfiles[i]))
save.time(names(myfiles[i]))
4rawdata
dalslks
rawdata4
library(gplots)
library(plyr)
library(xtable)
setwd("~/NeuroMiner/data_sets")
#read.csv("../first_subsets/pyramidal_appended.csv",T)->dump
read.csv("NeuronDataMaster.csv",T)->colmaster
#following three functions clean and trim the dataset
trim.csv<-function(tdata,species)
{
####testing code
#x<-funk
### cleaning the dataset
#dat<-data.frame(y=as.factor(x[,ny]),x[,-ny])
tdata<-rdata
tdata<-na.omit(tdata)
#suppress the warnings due to NAs generated
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
wwo.axon<-function(temp,keep)
{
temp<-temp[temp$Structural.Domains==keep,]
temp$Structural.Domains<-factor(temp$Structural.Domains)
return(temp)
}
process.age<-function(temp,age=18)
{
temp<-temp[temp$Min.Age!=c("Not reported"),]
temp$Min.Age<-factor(temp$Min.Age)
temp$Min.Age<-as.numeric(temp$Min.Age)
temp<-temp[temp$Min.Age>age,]
return(temp)
}
process.csv<-function(x,ny)
{
####testing code
##x<-(myfiles[[i]])
### check for number of species in a dataset
###   if dataset contains only 1 species
###   the categorical variable is set to the
###   primary brain region
if (nlevels(as.factor(x[,ny]))==1){ny<-15}
### cleaning the dataset
x<-x[x$Archive.Name!="McQuiston",]
dat<-data.frame(y=as.factor(x[,ny]),x[,c(nx1,nx2,nx3)])
dat<-na.omit(dat)
dat$Soma.Surface<-as.numeric(dat$Soma.Surface)
dat$Gstat.total.cable.length<-as.numeric(dat$Gstat.total.cable.length)
dat$Fractal_Dim<-as.numeric(dat$Fractal_Dim)
return(dat)
}
#check this
#####
mkdirs <- function(fp)
{
if(!file.exists(fp)) {
mkdirs(dirname(fp))
dir.create(fp)
}
}
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
rawdata4<-process.age(rawdata,18)
species<-c("rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
rawdata2<-process.age(rawdata,18)
dim(rawdata1)
dim(rawdata4)
dim(rawdata2)
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
species<-c("rat","human")
rawdata<-trim.csv(rdata,species)
rawdata<-process.age(rawdata,18)
dim(rawdata)
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
rawdata<-process.age(rawdata,18)
dim(rawdata)
species<-c("rat","human")
rawdata<-trim.csv(rawdata,species)
rawdata<-process.age(rawdata,18)
dim(rawdata)
trim.csv<-function(tdata,species)
{
####testing code
#x<-funk
### cleaning the dataset
#dat<-data.frame(y=as.factor(x[,ny]),x[,-ny])
#tdata<-rdata
tdata<-na.omit(tdata)
#suppress the warnings due to NAs generated
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
rawdata<-process.age(rawdata,18)
dim(rawdata)
species<-c("rat","human")
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
trim.csv<-function(tdata,species)
{
####testing code
#x<-funk
### cleaning the dataset
#dat<-data.frame(y=as.factor(x[,ny]),x[,-ny])
#tdata<-rdata
tdata<-na.omit(tdata)
#suppress the warnings due to NAs generated
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
dim(rawdata)
species<-c("rat","human")
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
species
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
rawdata$y
str(rawdata)
names(rawdata[1:20])
rawdata$Species.Name
dim(rawdata)
rawdata<-trim.csv(rdata,species)
dim(rawdata)
rawdata<-trim.csv(rdata,species)
dim(rawdata)
species<-c("rat","human")
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata
rawdata$Species.name
rawdata$Species.Name
rawdata<-trim.csv(rawdata,species)
dim(rawdata)
rawdata$Species.Name
tdata<-rdata
dim(tdata)
tdata<-na.omit(tdata)
dim(tdata)
tdata<-na.omit(tdata)
dim(tdata)
tdata<-na.omit(tdata)
dim(tdata)
species<-c("C. elegans","mouse",
"rat","human")
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
dim(tdata)
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
dim(tdata)
suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
dim(tdata)
species
tdata$Species.Name==species
tdata$Species.Name==species
tdata[tdata$Species.Name==species,][,1:10]
tdata[tdata$Species.Name==species,][,22:45]
rdata<-read.csv("NeuronDataMaster.csv",T)
head(rdata$Species.Name)
length(rdata$Species.Name)
rdata<-rdata[1:100,]
length(rdata$Species.Name)
head(rdata$Species.Name)
rdata<-rdata[1:20,]
head(rdata$Species.Name)
rdata$Species.Name<-factor(rdata$Species.Name)
head(rdata$Species.Name)
rdata$Species.Name
rdata$Species.Name[1]
rdata$Species.Name[1]<-c("C. elegans")
rdata<-rdata[1:20,]
rdata$Species.Name
rdata<-read.csv("NeuronDataMaster.csv",T)
rdata<-rdata[1:20,]
rdata$Species.Name
rdata$Species.Name[1:4]
rdata$Species.Name[1:4]<-species
rdata$Species.Name[1:4]
str(species)
class(species)
?rev
rev(species)
rdata$Species.Name[5:8]
rdata$Species.Name[5:8]<-rev(species)
rdata$Species.Name[5:8]
rdata$Species.Name[1:8]
rdata$Species.Name
rdata[rdata$Species.Name==species]
names(rdata[,1:10])
rdata[rdata$Species.Name==species][4]
rdata[rdata$Species.Name==species,][4]
rdata[rdata$Species.Name==species,]
rdata[rdata$Species.Name==species,][4]
rdata[rdata$Species.Name==species][4]
rdata$Species.Name[18]
rdata$Species.Name[18]<-cat
rdata$Species.Name[18:20]<-c("cat","chicken","zebrafish")
rdata[rdata$Species.Name==species][4]
rdata[rdata$Species.Name==species,][4]
rdata$Species.Name==species
rdata$Species.Name==c(species)
subdf<-subset(rdata,Species.Name==species)
subdf
?subset
subdf<-subset(rdata,Species.Name==c("C. elegans","mouse","rat","human"))
subdf
rdata[rdata$Species.Name==species][4]
rdata$Species.Name==species
rdata[rdata$Species.Name==species][4]
rdata[rdata$Species.Name==species,][4]
rdata[rdata$Species.Name==species][4]
rdata[rdata$Species.Name==species,][4]
rdata[rdata$Species.Name=="C.elegans"|rdata$Species.Name=="rat"|rdata$Species.Name=="mouse"|rdata$Species.Name=="human",][4]
rdata<-read.csv("NeuronDataMaster.csv",T)
head(rdata$Species.Name)
rawdata<-trim.csv(rdata,species)
head(rawdata$Species.Name)
dim(rawdata)
species<-c("rat","human")
rawdata<-trim2.csv(rawdata,species)
trim2.csv<-function(tdata,species)
{
tdata<-na.omit(tdata)
#rdata[rdata$Species.Name==species][4]
#rdata[rdata$Species.Name==species,][4]
#rdata[rdata$Species.Name=="rat"|rdata$Species.Name=="human",]
#suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
suppressWarnings(tdata<-tdata[tdata$Species.Name=="rat"|tdata$Species.Name=="human",])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
rawdata<-process.age(rawdata,18)
dim(rawdata)
process.age<-function(temp,age=18)
{
temp<-temp[temp$Min.Age!=c("Not reported"),]
#temp$Min.Age<-factor(temp$Min.Age)
temp$Min.Age<-as.numeric(temp$Min.Age)
temp<-temp[temp$Min.Age>age,]
return(temp)
}
rdata<-read.csv("NeuronDataMaster.csv",T)
###test shit
#rdata<-rdata[1:20,]
rawdata<-trim.csv(rdata,species)
species<-c("rat","human")
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
rdata<-read.csv("NeuronDataMaster.csv",T)
dim(rdata)
rawdata<-trim.csv(rdata,species)
dim(rawdata)
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
rawdata<-trim2.csv(rawdata,species)
dim(rawdata)
trimspec.csv<-function(tdata,species)
{
tdata<-na.omit(tdata)
#rdata[rdata$Species.Name==species][4]
#rdata[rdata$Species.Name==species,][4]
#rdata[rdata$Species.Name=="rat"|rdata$Species.Name=="human",]
#suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
suppressWarnings(tdata<-tdata[tdata$Species.Name=="rat"|tdata$Species.Name=="human",])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
rawdata<-trim.csv(rdata,species)
dim(rawdata)
rawdata<-trim.csv(rdata,species)
dim(rawdata)
rawdata<-trimspec.csv(rawdata,species)
dim(rawdata)
str(rawdata)
str(rawdata$Species.Name)
dim(rawdata)
#following three functions clean and trim the dataset
trim.csv<-function(tdata,species)
{
####testing code
#x<-funk
### cleaning the dataset
#dat<-data.frame(y=as.factor(x[,ny]),x[,-ny])
#tdata<-rdata
tdata<-na.omit(tdata)
#suppress the warnings due to NAs generated
#rdata[rdata$Species.Name==species][4]
#rdata[rdata$Species.Name==species,][4]
#rdata[rdata$Species.Name=="C.elegans"|rdata$Species.Name=="rat"|rdata$Species.Name=="mouse"|rdata$Species.Name=="human",]
#suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
suppressWarnings(tdata<-tdata[tdata$Species.Name=="C.elegans"|tdata$Species.Name=="rat"|tdata$Species.Name=="mouse"|tdata$Species.Name=="human",])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
trimspec.csv<-function(tdata,species)
{
tdata<-na.omit(tdata)
#rdata[rdata$Species.Name==species][4]
#rdata[rdata$Species.Name==species,][4]
#rdata[rdata$Species.Name=="rat"|rdata$Species.Name=="human",]
#suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
suppressWarnings(tdata<-tdata[tdata$Species.Name=="rat"|tdata$Species.Name=="human",])
tdata$Species.Name<-factor(tdata$Species.Name)
return(tdata)
}
rdata<-read.csv("NeuronDataMaster.csv",T)
species<-c("C. elegans","mouse",
"rat","human")
dim(rdata)
rawdata<-trim.csv(rdata,species)
dim(rdata)
dim(rawdata)
str(rawdata$Species.Name)
trim.csv<-function(tdata,species)
{
####testing code
#x<-funk
### cleaning the dataset
#dat<-data.frame(y=as.factor(x[,ny]),x[,-ny])
#tdata<-rdata
tdata<-na.omit(tdata)
#suppress the warnings due to NAs generated
#rdata[rdata$Species.Name==species][4]
#rdata[rdata$Species.Name==species,][4]
#rdata[rdata$Species.Name=="C.elegans"|rdata$Species.Name=="rat"|rdata$Species.Name=="mouse"|rdata$Species.Name=="human",]
#suppressWarnings(tdata<-tdata[tdata$Species.Name==species,])
#suppressWarnings(tdata<-tdata[tdata$Species.Name=="C.elegans"|tdata$Species.Name=="rat"|tdata$Species.Name=="mouse"|tdata$Species.Name=="human",])
tdata<-tdata[tdata$Species.Name=="C.elegans"|tdata$Species.Name=="rat"|tdata$Species.Name=="mouse"|tdata$Species.Name=="human",]
tdata$Species.Name<-factor(tdata$Species.Name)
dim(tdata)
str(tdata$Species.Name)
return(tdata)
}
species<-c("C. elegans","mouse",
"rat","human")
rdata<-read.csv("NeuronDataMaster.csv",T)
rawdata<-trim.csv(rdata,species)
