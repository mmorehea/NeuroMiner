
R version 3.1.2 (2014-10-31) -- "Pumpkin Helmet"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin13.4.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> ############################################################################
> ##  Purpose: Variable Importance
> ############################################################################
> 
> 
> library(spa)
Loading required package: cluster
Loading required package: MASS
Warning message:
package ‘MASS’ was built under R version 3.1.3 
> library(randomForest)
randomForest 4.6-12
Type rfNews() to see new features/changes/bug fixes.
Warning message:
package ‘randomForest’ was built under R version 3.1.3 
> library(rpart)
> library(pls)

Attaching package: ‘pls’

The following object is masked from ‘package:stats’:

    loadings

Warning message:
package ‘pls’ was built under R version 3.1.3 
> 
> ####
> ## Function Definition
> ####
> mkdirs <- function(fp) {
+   if(!file.exists(fp)) {
+     mkdirs(dirname(fp))
+     dir.create(fp)
+   }
+ }
> 
> save.metrics<-function(fname)
+ {
+   
+   loc<-paste("~/NeuroMiner/presentations/",format(Sys.time(),"%m-%d-%Y"),"/",sep="")
+   mkdirs(loc)
+   
+ #   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-acc.txt",sep="")
+ #   write.table(teacc,somename,quote=FALSE,row.names=FALSE,col.names=TRUE)
+ #   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-spec.txt",sep="")
+ #   write.table(tespec,somename,quote=FALSE,row.names=FALSE,col.names=T)
+ #   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-sen.txt",sep="")
+ #   write.table(tesen,somename,quote=FALSE,row.names=FALSE,col.names=T)
+   
+   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-acc.pdf",sep="")
+   pdf(file=somename, width=11, 
+       height=8.5, pointsize=12,bg="transparent")
+   textplot(xtable(teacc))
+   dev.off()
+   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-spec.pdf",sep="")
+   pdf(file=somename, width=11, 
+       height=8.5, pointsize=12,bg="transparent")
+   textplot(xtable(tespec))
+   dev.off()
+   somename<-paste(loc, substr(fname,1,nchar(fname)-4), "-sen.pdf",sep="")
+   pdf(file=somename, width=11, 
+       height=8.5, pointsize=12,bg="transparent")
+   textplot(xtable(tesen))
+   dev.off()  
+ }
> 
> na.mean<-function(x,...){
+   handle.na<-function(x){ #plug the mean into missing values
+     x[is.na(x)]<-mean(x,na.rm=TRUE)
+     return(x)
+   }
+   p<-dim(x)
+   if(is.null(p)){ #special case: `x' is a vector
+     return(handle.na(x))
+   }
+   for(i in 1:p[2]){
+     if(!is.factor(x[,i]))# if `x' is a factor ignore it
+       x[,i]<-handle.na(x[,i])
+   }
+   return(x)
+ }
> 
> nipal<-function(x,y,k){
+   x<-scale(x,,scale=FALSE)
+   y<-scale(y,,scale=FALSE)
+   b<-p<-a<-u<-NULL
+   for(i in 1:k){
+     wt<-t(x)%*%y/as.numeric(t(y)%*%x%*%t(x)%*%y)
+     tt<-x%*%wt
+     pt<- t(x)%*%tt/as.numeric(t(tt)%*%tt)
+     
+     npt<-as.numeric(sqrt(t(pt)%*%pt))
+     wn<-npt*wt
+     tn<-npt*tt
+     pn<-pt/npt
+     bn<-as.numeric(t(tn)%*%y)/as.numeric(t(tn)%*%tn)
+     x<-x-tn%*%t(pn)
+     y<-y-bn*tn
+     
+     b<-c(b,bn)
+     p<-cbind(p,pn)
+     a<-cbind(a,wn)
+     u<-cbind(u,tn)
+   }
+   dim(x)[2]->ab
+   return(structure(list(b=b,p=p,a=a,u=u,d=ab,q=k),class="upls"))
+ }
> 
> vip<-function(obj,y,nm=NULL){
+   if(class(obj)!="upls"){
+     stop("Object is not of type upls")
+   }
+   a1<-as.vector(obj$a^2%*%cor(obj$u,y)^2 )
+   if(is.null(nm)){
+     a2<-1:length(a1)
+     names(a1)<-paste(a2)
+   }else{
+     names(a1)<-nm
+   }
+   return(a1)##sort(a1,decreasing=TRUE))
+ }
> 
> # loads a csv into a data.frame and cleans data
> process.csv<-function(x)
+ { 
+   ####testing code
+   ##x<-(myfiles[[i]])
+   
+   ### check for number of species in a dataset
+   ###   if dataset contains only 1 species
+   ###   the categorical variable is set to the
+   ###   primary brain region
+   if (nlevels(as.factor(x[,ny]))==1){ny<-15}
+   
+   ### cleaning the dataset
+   x<-x[x$Archive.Name!="McQuiston",]
+   dat<-data.frame(y=as.factor(x[,ny]),x[,c(nx1,nx2,nx3)])
+   dat<-na.omit(dat)
+   dat$Soma.Surface<-as.numeric(dat$Soma.Surface)
+   dat$Gstat.total.cable.length<-as.numeric(dat$Gstat.total.cable.length)
+   dat$Fractal_Dim<-as.numeric(dat$Fractal_Dim)
+   return(dat)  
+ }  
> parsecolors<-function(cols)
+ {
+   makecolors<-function(x)
+   {
+     # x<-low
+     ctemp<-paste(pal(length(x)),"FF",sep="")
+     ###working
+     #tf<-levels(dat[,1])%in%x
+     #test
+     tf<-levels(temp1[,1])%in%x
+     tf<-c(FALSE,tf,FALSE)
+     cols[tf]<-ctemp
+     return(cols)
+   }
+   low<-c("blowfly","C. elegans","drosophila melanogaster",
+          "moth","spiny lobster")
+   medium<-c("chicken","frog","goldfish","guinea pig","manatee",
+             "mouse","pouched lamprey","proechimys","rabbit",
+             "rat","salamander","zebrafish")
+   high<-c("bottlenose dolphin","cat","chimpanzee","clouded leopard",
+           "domestic pig","elephant","giraffe","human","humpback whale",
+           "minke whale","monkey","sheep","Siberian tiger")
+   
+   pal<-colorRampPalette(c("rosybrown4","red3"))
+   cols<-makecolors(low)
+   pal<-colorRampPalette(c("grey","blue"))
+   cols<-makecolors(medium)
+   #pal<-colorRampPalette(c("black","chartreuse"))
+   #pal<-colorRampPalette(c("black","chartreuse","black"))
+   pal<-colorRampPalette(c("darkgreen","green","palegreen"))
+   cols<-makecolors(high)
+   return(cols)
+ }
> # prints to pdf
> save.err<-function(rfor,subj,fname,counts)
+ {
+   last<-end(rfor$err.rate)[1]
+   mains<-paste(subj, ", OOB = ",round(mean(rfor$err.rate[last,1]),3),sep="")
+   loc<-paste("~/NeuroMiner/presentations/",format(Sys.time(),"%m-%d-%Y"),"/",sep="")
+   mkdirs(loc)
+   
+   #   png(filename=paste(subj, substr(fname,1,nchar(fname)-4), "1.png"), units="px", width=1024, 
+   #       height=768, pointsize=12, res=72)
+   
+   pdf(file=paste(loc,subj, substr(fname,1,nchar(fname)-4), "1.pdf"), width=11, 
+       height=8.5, pointsize=12)
+   matplot(rfor$err.rate,lwd=2,col=cols,lty=c(1,2,4,6),type="l",
+           main=mains, cex.main=1.2,font.main=1,
+           sub=fname, cex.sub=.7,ylab="Error rate (%)",xlab="# of trees")
+   
+   #   plot(vpls,vrf,main=paste(subj,", PLS vs. RF variable importance"),font.main=1,
+   #        cex.main=1.2,sub=fname,cex.sub=.8,
+   #        ylab="RF (Variable Score)",xlab="PLS (Variable Score)",
+   #        pch=16,bg="transparent")
+   #label err rates at 100
+   hund<-rep(100,dim(rfor$err.rate)[2])
+   textxy(hund,rfor$err.rate[100,],round(rfor$err.rate[100,],2), cex=1.2)
+   lname<-paste(colnames(rfor$err.rate),"   n=",counts)
+   legend("bottomright",inset=.05,legend=lname,
+          cex=1,col=cols,lty=c(1,2,4,6),lwd=2,bg="white")
+   dev.off()
+   
+   ##MAP cols to dimnames(g$err.rate)[[2]]
+   #   png(filename=paste(subj,substr(fname,1,nchar(fname)-4), "2.png"), units="px", width=1024, 
+   #       height=768, pointsize=12, res=144)
+   pdf(file=paste(loc,subj, substr(fname,1,nchar(fname)-4), "2.pdf"), width=11, 
+       height=8.5, pointsize=12)
+   varImpPlot(rfor, main=paste(subj,", RF variable importance",sep=""),
+              cex.main=1.2,font.main=1,sub=fname,cex.sub=.7,bg="transparent")
+   dev.off()
+ }
> 
> ####
> ## Read in Data
> ###
> 
> # setwd("~/NeuroMiner/data_sets")
> # read.csv("NeuronDataMaster.csv",T)->colmaster
> 
> 
> setwd("~/NeuroMiner/data_sets/Neuron_subsets")
> temp =list.files(pattern="../*.csv")
> myfiles<-lapply(temp, function(x) read.csv(x,header=TRUE))
> names(myfiles)<-temp
> 
> 
> 
> i=9
> #i=28
> nx1<-33:96
> nx2<-97:110
> nx3<-111:159
> ny<-4
> temp1<-process.csv(myfiles[[i]])
> fname<-names(myfiles[i])
> nxx1<-2:65
> nxx2<-66:79
> nxx3<-81:dim(temp1)[2] #80 is Sholl.1 should always be 1
> #nxx<-list(c(nxx1),c(nxx2),c(nxx3))
> 
> 
> 
> ###
> ## Fit learner and make plots for each view
> ###
> 
> 
> 
> set.seed(020) ##so RF gets same result as in paper
> nu=c(0.2,0.5,0.8)  #train data is 20% 50% and 80% of total data
> lnu=length(nu)
> L1=3 #default is 50, number of times train sample is created
> 
> #following have L1 rows and 6 columns
> teacc=matrix(0,nrow=L1*lnu,ncol=7)  #accuracy
> colnames(teacc)<-c("Acc %lrn","L-meas_rf","L-meas_pls","Gstat_rf","Gstat_pls","Sholl_rf","Sholl_pls")
> tesen=matrix(0,nrow=L1*lnu,ncol=7)  #sensitivity
> colnames(tesen)<-c("Sen %lrn","L-meas_rf","L-meas_pls","Gstat_rf","Gstat_pls","Sholl_rf","Sholl_pls")
> tespec=matrix(0,nrow=L1*lnu,ncol=7) #specificity
> colnames(tespec)<-c("Spec %lrn","L-meas_rf","L-meas_pls","Gstat_rf","Gstat_pls","Sholl_rf","Sholl_pls")
> 
> #for(count in 1:length(nxx)){
> k3<-1
> t1<-proc.time()
> 
> for(j in 1:lnu){
+   for(i in 1:L1){
+     
+     teacc[k3,1]<-nu[j]
+     tesen[k3,1]<-nu[j]
+     tespec[k3,1]<-nu[j]
+     
+     
+     #talk to micheal and culp about this method
+     #because we had several species some having fewer number of samples
+     #than others the standard way of sampling dropped species i.e. 
+     # C. elegans. Predict fxn would throw fits when a species exists in the
+     # untrained but not in the training dataset. The following code subsets
+     # by species, samples from each subset, appends the subsets back together
+     for(index in 1:nlevels(temp1$y)){
+       samp<-which(temp1$y==names(summary(temp1$y))[[index]])
+       if (exists("L")){
+         L<-append(L,sample(samp,ceiling(nu[j]*summary(temp1$y)[[index]])),length(L))
+         U<-append(U,setdiff(samp,L),length(U))
+       }
+       else{
+         L=sample(samp,ceiling(nu[j]*summary(temp1$y)[[index]]))
+         U=setdiff(samp,L)
+       }
+     }
+ 
+ 
+     grf<-randomForest(y~.,data=data.frame(y=temp1[L,1],temp1[L,c(nxx1)]))
+     tab=table(predict(grf,newdata=temp1[,nxx1])[U],temp1$y[U])
+ 
+    # grf<-randomForest(y~.,data=data.frame(y=as.factor(y),x)[L,])
+    # tab=table(predict(grf,newdata=x)[U],y[U])
+ 
+     v1<-diag(tab)/ apply(tab,2,sum)
+     teacc[k3,2]<-round(sum(diag(tab))/sum(tab),3)
+     tesen[k3,2]<-round(v1[2],3)
+     tespec[k3,2]<-round(v1[1],3)
+    
+     y1<-as.numeric(temp1$y)-1
+     gpls<-plsr(y~.,data=data.frame(y=y1[L],temp1[L,c(nxx1)]))
+     #gpls<-plsr(y~.,data=temp1[L,c(1,nxx1)])
+     #tab=table(predict(gpls,newdata=temp1[,nxx1],ncomp=2)[U]>0.5,temp1$y[U])
+     tab=table(predict(gpls,newdata=temp1[,nxx1],ncomp=10)[U]>0.5,y1[U]) #n=5
+ #     gpls<-plsr(y~.,data=data.frame(y,x)[L,])
+ #     tab=table(predict(gpls,newdata=x,ncomp=2)[U]>0.5,y[U])
+     v1<-diag(tab)/ apply(tab,2,sum)
+     teacc[k3,3]<-round(sum(diag(tab))/sum(tab),3)
+     tesen[k3,3]<-round(v1[2],3)
+     tespec[k3,3]<-round(v1[1],3)
+     
+     
+ grf<-randomForest(y~.,data=data.frame(y=temp1[L,1],temp1[L,c(nxx2)]))
+ tab=table(predict(grf,newdata=temp1[,nxx2])[U],temp1$y[U])
+ 
+ v1<-diag(tab)/ apply(tab,2,sum)
+ teacc[k3,4]<-round(sum(diag(tab))/sum(tab),3)
+ tesen[k3,4]<-round(v1[2],3)
+ tespec[k3,4]<-round(v1[1],3)
+ 
+ y1<-as.numeric(temp1$y)-1
+ gpls<-plsr(y~.,data=data.frame(y=y1[L],temp1[L,c(nxx2)]))
+ tab=table(predict(gpls,newdata=temp1[,nxx2],ncomp=10)[U]>0.5,y1[U]) #n=5
+ 
+ v1<-diag(tab)/ apply(tab,2,sum)
+ teacc[k3,5]<-round(sum(diag(tab))/sum(tab),3)
+ tesen[k3,5]<-round(v1[2],3)
+ tespec[k3,5]<-round(v1[1],3)
+ 
+ 
+ grf<-randomForest(y~.,data=data.frame(y=temp1[L,1],temp1[L,c(nxx3)]))
+ tab=table(predict(grf,newdata=temp1[,nxx3])[U],temp1$y[U])
+ 
+ v1<-diag(tab)/ apply(tab,2,sum)
+ teacc[k3,6]<-round(sum(diag(tab))/sum(tab),3)
+ tesen[k3,6]<-round(v1[2],3)
+ tespec[k3,6]<-round(v1[1],3)
+ 
+ y1<-as.numeric(temp1$y)-1
+ gpls<-plsr(y~.,data=data.frame(y=y1[L],temp1[L,c(nxx3)]))
+ tab=table(predict(gpls,newdata=temp1[,nxx3],ncomp=10)[U]>0.5,y1[U]) #n=5
+ 
+ v1<-diag(tab)/ apply(tab,2,sum)
+ teacc[k3,7]<-round(sum(diag(tab))/sum(tab),3)
+ tesen[k3,7]<-round(v1[2],3)
+ tespec[k3,7]<-round(v1[1],3)
+ 
+ 
+ 
+     cat("nu=",nu[j],"  k3=",k3,"  time=",(proc.time()-t1)/60,"\n")
+     k3<-k3+1
+     rm(L)
+     rm(U)
+   }
+   save.metrics(fname)
+ 
+ }
nu= 0.2   k3= 1   time= 0.31075 0.005433333 0.3163333 0 0 
nu= 0.2   k3= 2   time= 0.6122833 0.01053333 0.6230667 0 0 
nu= 0.2   k3= 3   time= 0.9157333 0.01585 0.9319167 0 0 
Error in save.metrics(fname) : could not find function "textplot"
Execution halted
